[{"path":[]},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CODE_OF_CONDUCT.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Code of Conduct","text":"interest fostering respectful supportive environment, contributors committed ensuring harrassment-free experience , regardless background identity. code conduct applies spaces group involved including, limited , group meetings (online -person), written communication, online discussions.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CODE_OF_CONDUCT.html","id":"expected-behavior","dir":"","previous_headings":"","what":"Expected Behavior","title":"Code of Conduct","text":"interactions expected professional, showing respect courtesy, help create environment Code Conduct designed uphold. Additional examples expected behaviors include following: - Using welcoming inclusive language - respectful differing viewpoints experiences - Gracefully accepting constructive criticism - Focusing best community - Showing empathy towards community members","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CODE_OF_CONDUCT.html","id":"unacceptable-behavior","dir":"","previous_headings":"","what":"Unacceptable Behavior","title":"Code of Conduct","text":"Examples unacceptable behavior group members include: - Written verbal comments effect excluding people basis membership specific group - Causing someone fear safety, stalking, following, intimidation - Violent threats language directed another person - use sexualized language imagery unwelcome sexual attention advances - Nonconsensual unwelcome physical contact - Sustained disruption talks, events communications - Insults put downs - Sexist, racist, homophobic, transphobic, ableist, exclusionary jokes - Incitement violence, suicide, self-harm - conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CODE_OF_CONDUCT.html","id":"consequences-of-unacceptable-behavior","dir":"","previous_headings":"","what":"Consequences of Unacceptable Behavior","title":"Code of Conduct","text":"Individuals asked stop inappropriate behavior expected comply immediately. Violations Code Conduct first addressed within project group. issue resolved internally, escalated DSCI310 teaching team action.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct derived DSCI 100 Code Conduct Tidyverse Code Conduct","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the Project","title":"Contributing to the Project","text":"welcome input towards project repository including, limited , reporting issues, code changes, general feedback. Kindly review document see can best contribute project.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CONTRIBUTING.html","id":"core-members","dir":"","previous_headings":"","what":"Core Members","title":"Contributing to the Project","text":"core members must create branch contribution submit pull request changes. Pull requests must reviewed least one core member accepted merged main branch. concerns issues must communicated Github Issues.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CONTRIBUTING.html","id":"external-contributors","dir":"","previous_headings":"","what":"External Contributors","title":"Contributing to the Project","text":"issue bugs found repository, kindly raise Github Issues page. changes repository, kindly follow steps : 1. Fork repository. 2. Clone forked repository. git clone https://github.com/-username/maternalhealthtools.git 3. Navigate project directory. 4. Create branch implement changes. git branch branch-name      git switch branch-name 5. Stage, commit, push changes. ``` git add  git commit -m “commit message” #Kindly connect commit message issue addressed git push origin branch-name 6. Open pull request. Pull requests reviewed core members within 7 working days.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/CONTRIBUTING.html","id":"license-and-code-of-conduct","dir":"","previous_headings":"","what":"License and Code of Conduct","title":"Contributing to the Project","text":"project licensed Creative Commons license adheres code conduct. submitting feedback changes, agree terms license code conduct.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 DSCI 310 Group 03 Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to maternalhealthtools","text":"maternalhealthtools package provides set tools cleaning data, training testing models, visualizing outcomes maternal health data. vignette provides full example using maternalhealthtools package.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"1. Sample Data","title":"Introduction to maternalhealthtools","text":"creating sample data example.","code":"sample_df <- data.frame(   Age = c(25, 30, 35, NA, 42, 29, 38, 31, NA, 40),   SystolicBP = c(120, 130, 135, 115, 140, 125, 135, 128, 122, NA),   DiastolicBP = c(80, 85, 78, 75, 90, NA, 82, 84, 79, 77),   BS = c(5.6, 6.2, 4.9, 7.1, NA, 5.8, 6.4, NA, 5.9, 6.3),   BodyTemp = c(98.6, 99.1, 97.9, 98.4, 98.9, NA, 98.2, 98.7, 98.5, 99.0),   HeartRate = c(72, 80, 76, 74, 85, 78, NA, 82, 79, 77),   RiskLevel = c(\"low risk\", \"mid risk\", \"high risk\", \"low risk\", NA,                 \"mid risk\", \"high risk\", \"low risk\", \"mid risk\", \"high risk\"),   stringsAsFactors = FALSE )  sample_df #>    Age SystolicBP DiastolicBP  BS BodyTemp HeartRate RiskLevel #> 1   25        120          80 5.6     98.6        72  low risk #> 2   30        130          85 6.2     99.1        80  mid risk #> 3   35        135          78 4.9     97.9        76 high risk #> 4   NA        115          75 7.1     98.4        74  low risk #> 5   42        140          90  NA     98.9        85      <NA> #> 6   29        125          NA 5.8       NA        78  mid risk #> 7   38        135          82 6.4     98.2        NA high risk #> 8   31        128          84  NA     98.7        82  low risk #> 9   NA        122          79 5.9     98.5        79  mid risk #> 10  40         NA          77 6.3     99.0        77 high risk"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"check-for-missing-values","dir":"Articles","previous_headings":"","what":"2. Check for Missing Values","title":"Introduction to maternalhealthtools","text":"use check_na() identify missing values exist.","code":"check_na(sample_df) #> # A tibble: 7 × 2 #>   feature        na #>   <chr>       <dbl> #> 1 Age             2 #> 2 SystolicBP      1 #> 3 DiastolicBP     1 #> 4 BS              2 #> 5 BodyTemp        1 #> 6 HeartRate       1 #> 7 RiskLevel       1"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"clean-the-data","dir":"Articles","previous_headings":"","what":"3. Clean the data","title":"Introduction to maternalhealthtools","text":"using clean(), clean data removing rows missing values converting target column RiskLevel factor.","code":"cleaned_df <- clean(sample_df, RiskLevel) cleaned_df #>   Age SystolicBP DiastolicBP  BS BodyTemp HeartRate RiskLevel #> 1  25        120          80 5.6     98.6        72  low risk #> 2  30        130          85 6.2     99.1        80  mid risk #> 3  35        135          78 4.9     97.9        76 high risk"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"get-target-classes","dir":"Articles","previous_headings":"","what":"4. Get Target Classes","title":"Introduction to maternalhealthtools","text":"Use get_targets() inspect unique classes target column.","code":"get_targets(cleaned_df, RiskLevel) #>   RiskLevel #> 1  low risk #> 2  mid risk #> 3 high risk"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"train-models","dir":"Articles","previous_headings":"","what":"5. Train Models","title":"Introduction to maternalhealthtools","text":"Now clean data, can start training . train two models, multinomial logistic regression random forest model, using provided training functions.","code":"train_data <- cleaned_df  mlr_model <- training_mlr_model(train_data) print(mlr_model) #> Call: #> nnet::multinom(formula = RiskLevel ~ ., data = train_data, trace = FALSE) #>  #> Coefficients: #>          (Intercept)       Age SystolicBP DiastolicBP        BS  BodyTemp #> low risk   0.8156779 -75.84429  -62.53387    45.95542  5.201207  81.70168 #> mid risk  -0.4563814 -13.76454  -25.18209    43.43934 10.193265 -33.57485 #>          HeartRate #> low risk -18.31175 #> mid risk  45.67738 #>  #> Residual Deviance: 0  #> AIC: 12 rf_model <- training_rf_model(train_data) print(rf_model) #>  #> Call: #>  randomForest(formula = RiskLevel ~ ., data = train_data, ntree = 500,      importance = TRUE)  #>                Type of random forest: classification #>                      Number of trees: 500 #> No. of variables tried at each split: 2 #>  #>         OOB estimate of  error rate: 100% #> Confusion matrix: #>           high risk low risk mid risk class.error #> high risk         0        1        0           1 #> low risk          0        0        1           1 #> mid risk          0        1        0           1"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"model-testing","dir":"Articles","previous_headings":"","what":"6. Model Testing","title":"Introduction to maternalhealthtools","text":"testing(), can test saved model new dataset. step commented requires saved .rds file.","code":"# test_results <- testing(\"models/mlr_model.rds\", test_data) # print(test_results)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/articles/maternalhealthtools-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"7. Visualization","title":"Introduction to maternalhealthtools","text":"help interpretation, visualization() helps generate three types plots: confusion matrix, random forest feature importance, predicted probabilities. avoid creating files vignette, show examples without running .","code":"# 1. Confusion Matrix Plot  # helper_conf_table <- data.frame( #                True = c(\"low risk\", \"mid risk\", \"high risk\", #                        \"low risk\", \"mid risk\", \"high risk\", #                        \"low risk\", \"mid risk\", \"high risk\"), #                Predicted = c(\"low risk\", \"low risk\", \"low risk\", #                                \"mid risk\", \"mid risk\", \"mid risk\", #                                \"high risk\", \"high risk\", \"high risk\"), #                Frequency = c(9, 17, 9, 10, 6, 9, 8, 14, 18), #                Percentage = c(33.3, 45.9, 25.0, 37.0, 16.2, 25.0, 29.6, 37.8, 50.0)) #                 # visualization(\"conf_matrix\", helper_conf_table, conf_type = \"mlr\", output_dir = \"outputs\")   # 2. Random Forest Feature Importance plot  # rf_model <- training_rf_model(train_data)  # visualization(\"feature_importance\", rf_model, conf_type = NULL, output_dir = \"outputs\")  # 3. Predicted Probability vs Blood Sugar plot  # prob_table <- data.frame( #   BS = c(4.5, 5.0, 5.5, 6.0, 6.5, 7.0), #   Probability = c(0.2, 0.3, 0.5, 0.6, 0.7, 0.9), #   RiskLevel = factor(c(\"low risk\", \"low risk\", \"mid risk\", \"mid risk\", \"high risk\", \"high risk\")) #   )  # visualization(\"pred_prob\", prob_table, conf_type = NULL, output_dir = \"outputs\")"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roy Oh. Author, maintainer. Kim Tan Palanca. Author. Nicolas Zhu. Author. Mengen Liu. Author.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oh R, Tan Palanca K, Zhu N, Liu M (2025). maternalhealthtools: Maternal Health Analysis Tools. R package version 0.0.0.9000, https://dsci-310-2025.github.io/maternalhealthtools/.","code":"@Manual{,   title = {maternalhealthtools: Maternal Health Analysis Tools},   author = {Roy Oh and Kim {Tan Palanca} and Nicolas Zhu and Mengen Liu},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dsci-310-2025.github.io/maternalhealthtools/}, }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/index.html","id":"maternalhealthtools","dir":"","previous_headings":"","what":"Maternal Health Analysis Tools","title":"Maternal Health Analysis Tools","text":"goal maternalhealthtools provide reusable functions cleaning, training, testing, visualizing maternal health data. includes tools handling missing inconsistent data, training testing multinomial logistic regression random forest models, generating plot exploratory analysis model interpretation.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Maternal Health Analysis Tools","text":"can install development version maternalhealthtools : GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DSCI-310-2025/maternalhealthtools\")"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Maternal Health Analysis Tools","text":"common task dealing maternal health data involves checking missing values, cleaning data, examining unique values target column. functions like check_na(), clean(), get_targets() useful. check_na() summarizes number missing values column. makes easier spot cleaning needed. clean() ensures target variable properly formatted factor removes missing data. get_targets() returns unique values target column. especially useful working large datasets understanding class distribution modeling. training_mlr_model() trains multinomial logistic regression model based data. Similarly, training_rf_model() builds random forest model using default 500 trees. testing() function loads saved classification model (e.g., .rds file) applies test dataset generate predictions. class probabilities also available disabled default. Note: Since function depends trained model file, examples run README file. visualization() helps generate three types plots: Confusion Matrix plot Random Forest Feature Importance plot Predicted Probability vs Blood Sugar plot function useful model visualization interpretation. saves generated plot file specified output directory. Note: Since function depends input output files, examples run README file. information visualization() function, reading visualization.R script recommended.","code":"library(maternalhealthtools)  # Sample dataset df <- data.frame(   Age = c(25, NA, 35, 40, 45, 30),   BloodPressure = c(120, 130, NA, 110, 140, 125),   RiskLevel = c(\"low risk\", \"mid risk\", \"high risk\", NA, \"high risk\", \"mid risk\"),   stringsAsFactors = FALSE )  check_na(df) #> # A tibble: 3 × 2 #>   feature          na #>   <chr>         <dbl> #> 1 Age               1 #> 2 BloodPressure     1 #> 3 RiskLevel         1 cleaned_df <- clean(df, RiskLevel) cleaned_df #>   Age BloodPressure RiskLevel #> 1  25           120  low risk #> 2  45           140 high risk #> 3  30           125  mid risk get_targets(cleaned_df, RiskLevel) #>   RiskLevel #> 1  low risk #> 2 high risk #> 3  mid risk # Example training data train_data <- data.frame(   Age = c(25, 30, 35),   SystolicBP = c(120, 130, 110),   DiastolicBP = c(80, 85, 75),   BS = c(5.6, 6.2, 4.9),   BodyTemp = c(98.6, 99.1, 97.9),   HeartRate = c(72, 80, 76),   RiskLevel = factor(c(\"low risk\", \"mid risk\", \"high risk\")) )  mlr_model <- training_mlr_model(train_data) summary(mlr_model) #> Call: #> nnet::multinom(formula = RiskLevel ~ ., data = train_data, trace = FALSE) #>  #> Coefficients: #>          (Intercept)       Age SystolicBP DiastolicBP        BS   BodyTemp #> low risk  0.08007772 -31.23502   9.632075    6.417592 0.6714557   8.340112 #> mid risk -0.35495554 -10.62350  24.546617    5.174198 2.2761942 -31.170615 #>             HeartRate #> low risk -20.81487193 #> mid risk  -0.09997695 #>  #> Std. Errors: #>          (Intercept)          Age  SystolicBP  DiastolicBP           BS #> low risk 2.71479e+36 6.786981e+37 3.25775e+38 2.171833e+38 1.520283e+37 #> mid risk 2.71479e+36 6.786981e+37 3.25775e+38 2.171833e+38 1.520283e+37 #>              BodyTemp   HeartRate #> low risk 2.676783e+38 1.95465e+38 #> mid risk 2.676783e+38 1.95465e+38 #>  #> Residual Deviance: 0  #> AIC: 12 rf_model <- training_rf_model(train_data) print(rf_model) #>  #> Call: #>  randomForest(formula = RiskLevel ~ ., data = train_data, ntree = 500,      importance = TRUE)  #>                Type of random forest: classification #>                      Number of trees: 500 #> No. of variables tried at each split: 2 #>  #>         OOB estimate of  error rate: 100% #> Confusion matrix: #>           high risk low risk mid risk class.error #> high risk         0        1        0           1 #> low risk          1        0        0           1 #> mid risk          0        1        0           1 # Example usage # testing(\"path/to/mlr_model.rds\", test_data) # Example usage # 1. Confusion Matrix Plot example  # helper_conf_table <- data.frame( #                True = c(\"low risk\", \"mid risk\", \"high risk\", #                        \"low risk\", \"mid risk\", \"high risk\", #                        \"low risk\", \"mid risk\", \"high risk\"), #                Predicted = c(\"low risk\", \"low risk\", \"low risk\", #                                \"mid risk\", \"mid risk\", \"mid risk\", #                                \"high risk\", \"high risk\", \"high risk\"), #                Frequency = c(9, 17, 9, 10, 6, 9, 8, 14, 18), #                Percentage = c(33.3, 45.9, 25.0, 37.0, 16.2, 25.0, 29.6, 37.8, 50.0)) #                 # visualization(\"conf_matrix\", helper_conf_table, conf_type = \"mlr\", output_dir = \"outputs\")   # 2. Random Forest Feature Importance plot  # rf_model <- training_rf_model(train_data)  # visualization(\"feature_importance\", rf_model, conf_type = NULL, output_dir = \"outputs\")  # 3. Predicted Probability vs Blood Sugar plot  # prob_table <- data.frame( #   BS = c(4.5, 5.0, 5.5, 6.0, 6.5, 7.0), #   Probability = c(0.2, 0.3, 0.5, 0.6, 0.7, 0.9), #   RiskLevel = factor(c(\"low risk\", \"low risk\", \"mid risk\", \"mid risk\", \"high risk\", \"high risk\")) #   )  # visualization(\"pred_prob\", prob_table, conf_type = NULL, output_dir = \"outputs\")"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/index.html","id":"position-in-the-r-package-ecosystem","dir":"","previous_headings":"","what":"Position in the R Package Ecosystem","title":"Maternal Health Analysis Tools","text":"maternalhealthtools package provides small set helper functions support data analysis workflows. combines common tasks cleaning data, training testing models, generating visualizations. functions package built widely used R packages like dplyr, randomForest, ggplot2, meant simplify repetitive steps. Compared packages, maternalhealthtools provides lighter specific use case like maternal health classification. offers predefined workflow reduces amount repeated code.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/check_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Missing Values — check_na","title":"Check Missing Values — check_na","text":"Check Missing Values","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/check_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Missing Values — check_na","text":"","code":"check_na(data)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/check_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Missing Values — check_na","text":"data dataframe","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/check_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Missing Values — check_na","text":"tibble feature names NA counts","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/check_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Missing Values — check_na","text":"","code":"df <- data.frame(Age = c(25, NA, 35), BS = c(NA, NA, 8)) check_na(df) #> # A tibble: 2 × 2 #>   feature    na #>   <chr>   <dbl> #> 1 Age         1 #> 2 BS          2 #> # A tibble: 2 × 2 #>   feature     na #>   <chr>    <int> #>   Age          1 #>   BS           2  if (FALSE) { # \\dontrun{ check_na(100) check_na(df['Age']) check_na(df$Age) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Unique Target Classes — clean","title":"Get Unique Target Classes — clean","text":"Get Unique Target Classes","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Unique Target Classes — clean","text":"","code":"clean(data, target)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Unique Target Classes — clean","text":"data dataframe target target column","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Unique Target Classes — clean","text":"cleaned dataframe missing values removed categorical target variable converted factor","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Unique Target Classes — clean","text":"","code":"df <- data.frame(Age = c(25, 35, NA, 29), RiskLevel = c(\"high risk\", NA, \"low risk\", \"mid risk\")) clean(df, RiskLevel) #>   Age RiskLevel #> 1  25 high risk #> 2  29  mid risk #>   Age    RiskLevel #> 1   25    high risk #> 2   29     mid risk  if (FALSE) { # \\dontrun{ clean(df, \"RiskLevel\") clean(RiskLevel, df) clean(df[\"RiskLevel\"]) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/get_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Unique Target Classes — get_targets","title":"Get Unique Target Classes — get_targets","text":"Get Unique Target Classes","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/get_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Unique Target Classes — get_targets","text":"","code":"get_targets(data, target)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/get_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Unique Target Classes — get_targets","text":"data dataframe target column target target column","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/get_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Unique Target Classes — get_targets","text":"dataframe unique values target column","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/get_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Unique Target Classes — get_targets","text":"","code":"df <- data.frame(RiskLevel = c(\"low risk\", \"mid risk\", \"low risk\", \"high risk\")) get_targets(df, RiskLevel) #>   RiskLevel #> 1  low risk #> 2  mid risk #> 3 high risk #>   RiskLevel #> 1 low risk #> 2 mid risk #> 3 high risk  if (FALSE) { # \\dontrun{ get_targets(df, \"RiskLevel\") get_targets(RiskLevel, df) get_targets(df[\"RiskLevel\"]) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate predictions from a trained classification model — testing","title":"Generate predictions from a trained classification model — testing","text":"function loads trained classification model .rds file uses make predictions test dataset. can also return class probabilities disabled default.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate predictions from a trained classification model — testing","text":"","code":"testing(model_file, test_data, return_probs = FALSE)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate predictions from a trained classification model — testing","text":"model_file Character. Path saved .rds model file test_data Data frame tibble. Test dataset regular target feature return_probs Logical. TRUE, function also returns class probabilities","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate predictions from a trained classification model — testing","text":"return_probs = FALSE, returns character vector predicted class labels. return_probs = TRUE, returns named list : predictions: character vector predicted class labels probabilities: matrix data frame class probabilities","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate predictions from a trained classification model — testing","text":"","code":"if (FALSE) { # \\dontrun{ testing(\"model.rds\", test_data) testing(\"model.rds\", test_data, return_probs = TRUE) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_mlr_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train Multinomial Logistic Regression Model — training_mlr_model","title":"Train Multinomial Logistic Regression Model — training_mlr_model","text":"Train Multinomial Logistic Regression Model","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_mlr_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train Multinomial Logistic Regression Model — training_mlr_model","text":"","code":"training_mlr_model(train_data)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_mlr_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train Multinomial Logistic Regression Model — training_mlr_model","text":"train_data dataframe containing training data","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_mlr_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train Multinomial Logistic Regression Model — training_mlr_model","text":"trained multinomial model","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_mlr_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train Multinomial Logistic Regression Model — training_mlr_model","text":"","code":"if (FALSE) { # \\dontrun{ training_mlr_model(train_data) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_rf_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train Random Forest Model — training_rf_model","title":"Train Random Forest Model — training_rf_model","text":"Train Random Forest Model","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_rf_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train Random Forest Model — training_rf_model","text":"","code":"training_rf_model(train_data)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_rf_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train Random Forest Model — training_rf_model","text":"train_data dataframe containing training data","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_rf_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train Random Forest Model — training_rf_model","text":"trained random forest model","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/training_rf_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train Random Forest Model — training_rf_model","text":"","code":"if (FALSE) { # \\dontrun{ training_rf_model(train_data) } # }"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/visualization.html","id":null,"dir":"Reference","previous_headings":"","what":"Create visualizations — visualization","title":"Create visualizations — visualization","text":"Creates predicted probability, confusion matrices random forest feature importance plots","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/visualization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create visualizations — visualization","text":"","code":"visualization(plot_type, input, conf_type, output_dir)"},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/visualization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create visualizations — visualization","text":"plot_type Character string specifying type plot generate. Must one : \"conf_matrix\" confusion matrix visualization \"feature_importance\" feature importance plot \"pred_prob\" predicted probabilities plot input input file visualization: \"conf_matrix\": data frame containing confusion matrix data columns True, Predicted, Frequency, Percentage. \"feature_importance\": trained model object (e.g., Random Forest model) extracting feature importance scores. \"pred_prob\": data frame containing predicted probabilities columns BS (blood sugar levels) Probability. conf_type Character string specifying confusion matrix type. Required plot_type = \"conf_matrix\". Must one : \"baseline\" Baseline Confusion Matrix \"mlr\" MLR Confusion Matrix \"rf\" Random Forest Confusion Matrix using plot_type = \"conf_matrix\", specify NULL output_dir Character string specifying directory path output plot saved. Ensure directory exists.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/visualization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create visualizations — visualization","text":"saves generated plot .png file specified output_dir.","code":""},{"path":"https://dsci-310-2025.github.io/maternalhealthtools/reference/visualization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create visualizations — visualization","text":"","code":"helper_test_data <- tibble::tibble(   Age = sample(10:50, 100, replace = TRUE),   SystolicBP = sample(seq(70, 140, by = 10), 100, replace = TRUE),   DiastolicBP = sample(seq(50, 90, by = 10), 100, replace = TRUE),   BS = round(runif(100, 6.5, 13), 2),   BodyTemp = rep(98, 100) + rnorm(100, mean = 0, sd = 0.5),   HeartRate = sample(seq(70, 100, by = 2), 100, replace = TRUE),   RiskLevel = sample(c(\"low risk\", \"mid risk\", \"high risk\"), 100, replace = TRUE) ) %>%   dplyr::mutate(RiskLevel = factor(RiskLevel, levels = c(\"low risk\", \"mid risk\", \"high risk\"))) %>%   dplyr::mutate(RiskLevel = stats::relevel(RiskLevel, ref = \"low risk\"))  generate_probs <- function(n) {   probs <- matrix(runif(n * 3), nrow = n)   probs <- probs / rowSums(probs)  # Normalize to ensure they sum to 1   as.data.frame(probs) }  helper_data_conf_pred <- tibble::tibble(   ID = 1:100,   Predicted_Class = sample(c(\"low risk\", \"mid risk\", \"high risk\"), 100, replace = TRUE),   `low risk` = generate_probs(100)[, 1],   `mid risk` = generate_probs(100)[, 2],   `high risk` = generate_probs(100)[, 3] )  helper_data_conf_pred <- helper_data_conf_pred %>%   dplyr::rowwise() %>%   dplyr::mutate(     Total = sum(`low risk`, `mid risk`, `high risk`)   ) %>%   dplyr::mutate(dplyr::across(`low risk`:`high risk`, ~ ./Total)) %>%   dplyr::select(-Total)  helper_conf_matrix <- caret::confusionMatrix(   as.factor(helper_data_conf_pred$Predicted_Class),   as.factor(helper_test_data$RiskLevel)) #> Warning: Levels are not in the same order for reference and data. Refactoring data to match.  helper_conf_table <- as.data.frame(helper_conf_matrix$table) colnames(helper_conf_table) <- c(\"True\", \"Predicted\", \"Frequency\") helper_conf_table <- helper_conf_table %>%   dplyr::mutate(True = factor(True, levels = c(\"low risk\", \"mid risk\", \"high risk\")),          Predicted = factor(Predicted, levels = c(\"low risk\", \"mid risk\", \"high risk\"))) %>%   dplyr::group_by(True) %>%   dplyr::mutate(Percentage = ifelse(is.na(Frequency), 0,     round((Frequency / sum(Frequency)) * 100, 1)))  visualization(\"conf_matrix\", helper_conf_table, \"mlr\", tempdir())"}]
